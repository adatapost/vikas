 SingleTon pattern design
 ============================================================
 SingleTon means only a single instance must be created and then
 it is shared by the entire app. That means no one instantiate
 the "Singleton" class twice or more.

 Naming convention of "Singleton" method:
     getInstance() or
     getYourClassName() 

 Steps:
    1. Add private constructor into your class 
       and this  is required.

    2. Define private & static reference field.

    3. Create "static" method named "getInstance"
     
Example:
public class MySettings {
   private String username;
   private String password;
   private String server;
   
   private static MySettings settings;  // field which holds
					// object reference

   private MySettings(){ } // Prevent instantiation outside
			   // the class
   public static MySettings getInstance() {
        if( settings == null ) { //If object is not exists
             settings = new MySettings(); // then create a one
        }
        return settings;
    }
   //add getter / setter for username,password & server
}

code in main:

    MySettings s = MySettings.getInstance();
    MySettings t = MySettings.getInstance();  //same as "s" 				//(previous) object reference

    s.setUser("Raj"); s.setPass("1233"); 
    t.setServer("123.2.2.3");
    System.out.println( MySettings.getInstance().getUsername());
    System.out.println( s.getPassword());
    System.out.println( t.getServer());
   
    

